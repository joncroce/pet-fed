// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  passwordHash String
  authToken    String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
  person       Person?
}

model Person {
  id           String                @id @default(uuid())
  displayName  String
  User         User                  @relation(references: [id], fields: [userId])
  userId       String                @unique
  pets         PersonsOnPets[]
  residencesAt PersonsOnResidences[]
  feedings     Feeding[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt()
}

model Pet {
  id         String             @id @default(uuid())
  name       String             @unique
  persons    PersonsOnPets[]
  residences PetsOnResidences[]
  feedings   Feeding[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt()
}

model Residence {
  id        String                @id @default(uuid())
  name      String
  personsAt PersonsOnResidences[]
  petsAt    PetsOnResidences[]
  foods     Food[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt()
}

model Food {
  id            String    @id @default(uuid())
  name          String
  residence     Residence @relation(fields: [residenceId], references: [id])
  residenceId   String
  amountInStock Int
  feedings      Feeding[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt()
}

model Feeding {
  id        String   @id @default(uuid())
  person    Person   @relation(fields: [personId], references: [id])
  personId  String
  pet       Pet      @relation(fields: [petId], references: [id])
  petId     String
  food      Food     @relation(fields: [foodId], references: [id])
  foodId    String
  amount    Int
  time      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model PersonsOnPets {
  pet      Pet     @relation(fields: [petId], references: [id])
  petId    String
  person   Person  @relation(fields: [personId], references: [id])
  personId String
  isOwner  Boolean

  @@id([petId, personId])
}

model PersonsOnResidences {
  residence   Residence @relation(fields: [residenceId], references: [id])
  residenceId String
  person      Person    @relation(fields: [personId], references: [id])
  personId    String
  isManager   Boolean

  @@id([residenceId, personId])
}

model PetsOnResidences {
  residence   Residence @relation(fields: [residenceId], references: [id])
  residenceId String
  pet         Pet       @relation(fields: [petId], references: [id])
  petId       String
  isPresent   Boolean

  @@id([residenceId, petId])
}
